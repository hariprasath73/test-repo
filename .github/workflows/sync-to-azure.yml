name: Sync GitHub â†’ Azure DevOps (All Branches Full Sync)

on:
  push:
    branches:
      - '**'
  workflow_dispatch:

jobs:
  sync:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout GitHub Repository (all branches)
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Required for history

    - name: Fetch All GitHub Branches (Critical Step!)
      run: |
        git fetch --all
        git branch -r

    - name: Set up Git Config
      run: |
        git config --global user.email "sync-bot@yourdomain.com"
        git config --global user.name "GitHub to Azure Sync Bot"

    - name: Clone Azure DevOps Repository
      env:
        AZURE_DEVOPS_PAT: ${{ secrets.AZURE_DEVOPS_PAT }}
        AZURE_DEVOPS_ORG: ${{ secrets.AZURE_DEVOPS_ORG }}
        AZURE_DEVOPS_PROJECT: ${{ secrets.AZURE_DEVOPS_PROJECT }}
        AZURE_DEVOPS_REPO: ${{ secrets.AZURE_DEVOPS_REPO }}
      run: |
        AZURE_URL="dev.azure.com/$AZURE_DEVOPS_ORG/$AZURE_DEVOPS_PROJECT/_git/$AZURE_DEVOPS_REPO"
        git clone "https://:$AZURE_DEVOPS_PAT@$AZURE_URL" azure_repo.git

        cd azure_repo.git

        # List ALL GitHub branches and sync them to Azure Repo
        for branch in $(git --git-dir=../.git for-each-ref --format='%(refname:short)' refs/remotes/origin/); do
          branch_name="${branch#origin/}"
          echo "Syncing GitHub branch: $branch_name"

          # Checkout or create the branch in Azure Repo
          if git show-ref --quiet refs/heads/"$branch_name"; then
            git checkout "$branch_name"
          else
            git checkout -b "$branch_name"
          fi

          git remote add github-origin ".."
          git fetch github-origin "$branch_name"

          git merge --allow-unrelated-histories --strategy=recursive --strategy-option=theirs "github-origin/$branch_name" -m "Merge GitHub branch '$branch_name' into Azure Repo"

          git push origin "$branch_name"

          git remote remove github-origin
        done

    - name: Cleanup
      run: rm -rf azure_repo.git
